trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # Azure CLI Login
          - task: AzureCLI@2
            displayName: "Azure Login"
            inputs:
              azureSubscription: "Terraform Deployment Connection"  # Ensure this matches the service connection name
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az account show
                echo "Azure CLI Authentication Successful"

          # Terraform Init
          - script: |
              terraform init -input=false
            displayName: "Terraform Init"
            env:
              ARM_USE_OIDC: true
              ARM_CLIENT_ID: "6553f4d9-76ac-4b64-8563-b998cde6e5a1"
              ARM_SUBSCRIPTION_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"
              ARM_TENANT_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"

          # Terraform Validate (Checks syntax and configuration before applying)
          - script: |
              terraform validate
            displayName: "Terraform Validate"

          # Terraform Plan
          - script: |
              terraform plan -out=tfplan -input=false
            displayName: "Terraform Plan"
            env:
              ARM_USE_OIDC: true
              ARM_CLIENT_ID: "6553f4d9-76ac-4b64-8563-b998cde6e5a1"
              ARM_SUBSCRIPTION_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"
              ARM_TENANT_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"

          # Terraform Apply (only on main branch and if plan file exists)
          - script: |
              if [ -f "tfplan" ]; then
                terraform apply -auto-approve tfplan
              else
                echo "Terraform plan file not found. Skipping apply."
                exit 1
              fi
            displayName: "Terraform Apply"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            env:
              ARM_USE_OIDC: true
              ARM_CLIENT_ID: "6553f4d9-76ac-4b64-8563-b998cde6e5a1"
              ARM_SUBSCRIPTION_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"
              ARM_TENANT_ID: "82f459ea-d085-4aeb-9f3a-33f009c19cd4"
