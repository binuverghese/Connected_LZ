trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # OIDC Authentication
          - task: AzureCLI@2
            displayName: "Fetch OIDC Token"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Fetching OIDC Token..."
                export ARM_OIDC_TOKEN=$(az account get-access-token --resource https://management.azure.com --query accessToken --output tsv)
                echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;]$ARM_OIDC_TOKEN"
                echo "##vso[task.setvariable variable=ARM_USE_OIDC;]true"
                echo "OIDC Token fetched successfully!"
                export ARM_TENANT_ID="$(TENANT_ID)"
                export ARM_SUBSCRIPTION_ID="$(SUBSCRIPTION_ID)"
                export ARM_CLIENT_ID="$(SERVICE_PRINCIPAL_ID)"
                export ARM_OIDC_TOKEN="$(ID_TOKEN)"

          # Terraform Init
          - script: |
              terraform init -input=false
            displayName: "Terraform Init"
            env:
              ARM_USE_OIDC: true
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"

          # Terraform Validate
          - script: |
              terraform validate
            displayName: "Terraform Validate"

          # Import existing resources if necessary
          - script: |
              terraform state list | grep 'azurerm_resource_group.this'
              if [ $? -ne 0 ]; then
                terraform import azurerm_resource_group.this /subscriptions/82f459ea-d085-4aeb-9f3a-33f009c19cd4/resourceGroups/rg-dev-001
              fi

              terraform state list | grep 'azurerm_route_table.this'
              if [ $? -ne 0 ]; then
                terraform import azurerm_route_table.this /subscriptions/82f459ea-d085-4aeb-9f3a-33f009c19cd4/resourceGroups/rg-dev-001/providers/Microsoft.Network/routeTables/rt-navigator
              fi
            displayName: "Import Existing Resources"

          # Terraform Plan
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform plan -out=tfplan -input=false 

          # Terraform Apply
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform apply -auto-approve tfplan 
