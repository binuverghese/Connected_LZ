trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # OIDC Authentication
          - task: AzureCLI@2
            displayName: "Fetch OIDC Token"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az login --identity
                az account set --subscription "$(ARM_SUBSCRIPTION_ID)"
                echo "Azure authentication successful!"


          # Terraform Init
          - script: |
              terraform init -input=false
            displayName: "Terraform Init"
            env:
              ARM_USE_OIDC: true
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"

          # Terraform Validate
          - script: |
              terraform validate
            displayName: "Terraform Validate"

          # Import existing resources into Terraform state
          - task: AzureCLI@2
            displayName: "Terraform Import Existing Resources"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Ensure required variables are available
                echo "ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)"
                echo "RESOURCE_GROUP_NAME: $(RESOURCE_GROUP_NAME)"
                echo "ROUTE_TABLE_NAME: $(ROUTE_TABLE_NAME)"

                # Check if Resource Group exists in state
                  if terraform state list | grep -q "azurerm_resource_group.this"; then
                    echo "Resource Group already in Terraform state."
                  else
                    echo "Importing existing Resource Group..."
                    terraform import azurerm_resource_group.this "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)"
                  fi

                # Check if Route Table exists in state
                  if terraform state list | grep -q "azurerm_route_table.this"; then
                    echo "Route Table already in Terraform state."
                  else
                    echo "Importing existing Route Table..."
                    terraform import azurerm_route_table.this "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)/providers/Microsoft.Network/routeTables/$(ROUTE_TABLE_NAME)"
                  fi


          # Terraform Plan
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform plan -out=tfplan -input=false 

          # Terraform Apply
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform apply -auto-approve tfplan 
