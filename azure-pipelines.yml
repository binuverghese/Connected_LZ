trigger:
  branches:
    include:
      - main
 
pr:
  branches:
    include:
      - main
 
variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO
 
stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
 
          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'
 
          # # Fetch OIDC Token
          # - task: AzureCLI@2
          #   displayName: "Fetch OIDC Token"
          #   inputs:
          #     azureSubscription: "Terraform Deployment Connection"
          #     scriptType: "bash"
          #     scriptLocation: "inlineScript"
          #     inlineScript: |
          #       echo "Fetching OIDC Token..."
          #       export ARM_OIDC_TOKEN=$(az account get-access-token --resource https://management.azure.com --query accessToken --output tsv)
          #       echo "##vso[task.setvariable variable=ARM_OIDC_TOKEN;]$ARM_OIDC_TOKEN"
          #       echo "##vso[task.setvariable variable=ARM_USE_OIDC;]true"
          #       echo "OIDC Token fetched successfully!"
 
          # Terraform Init
          - task: AzureCLI@2
            displayName: "Terraform Init"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform init -input=false
            # env:
            #   ARM_USE_OIDC: true
            #   ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
            #   ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
            #   ARM_TENANT_ID: "$(ARM_TENANT_ID)"
 
          # Terraform Validate (Checks syntax and configuration before applying)
          - script: |
              terraform validate
            displayName: "Terraform Validate"
 
          # Terraform Plan using AzureCLI@2 Task instead of script task
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform plan -out=tfplan -input=false
 
          # Terraform Apply (only on main branch and if plan file exists)
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform apply -auto-approve tfplan
 
 