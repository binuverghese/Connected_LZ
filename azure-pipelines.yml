trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # Azure CLI Login
          - task: AzureCLI@2
            displayName: "Azure Login"
            inputs:
              azureSubscription: "Terraform Deployment Connection"  # Ensure this matches the service connection name
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                az account show
                echo "Azure CLI Authentication Successful"

          # Initialize Terraform (with Backend Config)
          - script: |
              terraform init -backend-config="storage_account_name=tfstatedemonew" -backend-config="container_name=tfstate" -backend-config="key=$(TF_STATE_KEY)"
            displayName: "Terraform Init"
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"

          # Import Existing Resource (if it exists in Azure and needs to be imported into Terraform state)
          - script: |
              terraform import azurerm_resource_group.this /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/rg-dev-001 || echo "Resource already imported"
            displayName: "Import Existing Resource Group"
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"

          # Terraform Validate
          - script: |
              terraform validate
            displayName: "Terraform Validate"

          # Terraform Plan
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform plan -out=tfplan -input=false

          # Terraform Apply (only on main branch and if plan file exists)
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform apply -auto-approve tfplan
