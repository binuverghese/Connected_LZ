trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # Azure CLI Login using Service Principal
          - task: AzureCLI@2
            displayName: "Azure Login"
            inputs:
              azureSubscription: "Terraform Deployment Connection"  # Service Connection to authenticate with Azure
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Logging in with Service Principal..."
                az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                az account show
                echo "Azure CLI Authentication Successful"

          # Terraform Init
          - script: |
              terraform init -input=false
            displayName: "Terraform Init"
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"

          # Terraform Validate (Check syntax and configuration before applying)
          - script: |
              terraform validate
            displayName: "Terraform Validate"

          # Check if Resource Exists (Example: Network Security Group)
          - task: AzureCLI@2
            displayName: "Check if Resource Exists"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                RESOURCE_GROUP="rg-dev-001"
                RESOURCE_NAME="nsg-dev-001"
                RESOURCE_TYPE="Microsoft.Network/networkSecurityGroups"
                
                # Check if resource exists
                echo "Checking if resource exists..."
                EXISTING_RESOURCE=$(az resource show --name $RESOURCE_NAME --resource-group $RESOURCE_GROUP --resource-type $RESOURCE_TYPE --query "id" --output tsv)

                if [ -z "$EXISTING_RESOURCE" ]; then
                  echo "Resource does not exist, proceeding with creation."
                else
                  echo "Resource already exists: $EXISTING_RESOURCE"
                fi

          # Terraform Plan using AzureCLI@2 Task instead of script task
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform plan -out=tfplan -input=false

          # Terraform Apply (only on main branch and if plan file exists)
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform apply -auto-approve tfplan
