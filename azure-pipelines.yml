trigger: none

pr:
  branches:
    include:
      - main

parameters:
  - name: folderName
    displayName: "Select Terraform Folder"
    type: string
    default: "connected_online"
    values:
      - "firewall_bastion_hub"
      - "cloud_exclusive"
      - "cloud_exclusive_online"
      - "connected"
      - "connected_online"
      - "isolated"
      - "isolated_online"

variables:
  - group: TerraformSecrets  # Reference stored secrets in ADO

stages:
  - stage: Terraform_Import
    displayName: "Import Existing Resources"
    jobs:
      - job: Terraform_Import_Resources
        displayName: "Import Existing Resources into Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # Ensure the Terraform folder exists
          - script: |
              if [ ! -d "$(Build.SourcesDirectory)/${{ parameters.folderName }}" ]; then
                echo "Error: Folder $(Build.SourcesDirectory)/${{ parameters.folderName }} does not exist!"
                exit 1
              fi
            displayName: "Verify Terraform Folder Exists"

          # Initialize Terraform
          - script: |
              cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
              terraform init -input=false
            displayName: "Terraform Init"

          # Check if the resource group exists in Terraform state, import if not
          - script: |
              cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
              
              if terraform state list | grep -q "azurerm_resource_group.this"; then
                echo "Resource group already in state, skipping import."
              else
                echo "Importing the existing resource group..."
                terraform import azurerm_resource_group.this /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/rg-dev-002
              fi
            displayName: "Import Existing Resource Group"

  - stage: Terraform_Deployment
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform_Deploy
        displayName: "Deploy Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '1.9.2'

          # Change directory to selected Terraform folder
          - script: |
              cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
            displayName: "Change Directory to Selected Folder"

          # Terraform Init
          - task: AzureCLI@2
            displayName: "Terraform Init"
            inputs:
              azureSubscription: "Terraform Deployment Connection_1"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                terraform init -input=false \
                  -backend-config="resource_group_name=rg-dev-002" \
                  -backend-config="storage_account_name=tfstatedemonew" \
                  -backend-config="container_name=tfstate" \
                  -backend-config="key=${{ parameters.folderName }}.tfstate" \
                  -backend-config="use_azuread_auth=true"
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"

          # Terraform Validate
          - script: |
              cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
              terraform validate
            displayName: "Terraform Validate"

          # Terraform Plan
          - task: AzureCLI@2
            displayName: "Terraform Plan"
            inputs:
              azureSubscription: "Terraform Deployment Connection_1"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                terraform plan -out=tfplan -input=false
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"

          # Terraform Apply
          - task: AzureCLI@2
            displayName: "Terraform Apply"
            inputs:
              azureSubscription: "Terraform Deployment Connection_1"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                terraform apply -auto-approve tfplan
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"
